service: ${self:custom.appSync.name}-api-dev

provider:
  name: aws
  runtime: python3.7
  environment:
    DRIVING_RECORD_TABLE: "DrivingRecordTable"

plugins:
  - serverless-appsync-plugin

custom:
  appSync:
    name: ${self:service}-appSyncStack
    authenticationType: API_KEY
    mappingTemplatesLocation: mapping-templates
    schema: 
      - schema.gql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: DrivingRecordTable
        config:
          tableName: ${self:custom.appSync.name}-${self:custom.environment.DRIVING_RECORD_TABLE}

    mappingTemplates:
      - dataSource: DrivingRecordTable
        type: Query 
        field: getDrivingRecord
        request: getDrivingRecord.request.vtl
        response: getDrivingRecord.response.vtl
        #추후 Pipe line을 통한 추가적인 처리 가능하도록.
        #Python Lambda (not VTL)로 전환 할 예정.
resources:
  Resources:
    DrivingRecordTable: # name of the resource to be use later
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.appSync.name}-${self:custom.environment.DRIVING_RECORD_TABLE} # name of the table
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S
        KeySchema:
          - AttributeName: userID # partition key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UserTable: # name of the resource to be use later
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTable # name of the table
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S
        KeySchema:
          - AttributeName: userID # partition key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
service: MySQL-car-iot-dev

provider:
  name: aws
  region: ap-northeast-2
  stage: dev
  memorySize: 256
  runtime: python3.7
  role: LambdaRole
  environment:
    MYSQL_HOST: ${self:custom.MYSQL.HOST}
    MYSQL_PORT: ${self:custom.MYSQL.PORT}
    DB_NAME: ${self:custom.DB_NAME}
    USERNAME: ${self:custom.USERNAME}
    PASSWORD: ${self:custom.PASSWORD}
custom:
  DB_NAME: MySQLCarIotDB
  USERNAME: master
  PASSWORD: password
  MYSQL:
    HOST:
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]
    PORT:
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]

#plugins:
  #- serverless-pseudo-parameters
resources:
  Resources:
    LambdaRole: 
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
          Version: '2012-10-17'
        Policies:
          - PolicyName: CanLog
            PolicyDocument: 
              Version: '2012-10-17'
              Statement: 
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:*
    MySqlRDSInstance: 
      Type: AWS::RDS::DBInstance
      Properties:
        MasterUsername: ${self:custom.USERNAME}
        MasterUserPassword: ${self:custom.PASSWORD}
        AllocatedStorage: 20
        DBName: ${self:custom.DB_NAME}
        DBInstanceClass: db.t2.micro
        Engine: mysql
        EngineVersion: "5.6.41"
        PubliclyAccessible: true
        VPCSecurityGroups:
        - !GetAtt ServerlessSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: ServerlessSubnetGroup

    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
          -
            Key: "Name"
            Value: "ServerlessVPC"
    ServerlessVPCGA:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: ServerlessVPC
        InternetGatewayId:
          Ref: ServerlessInternetGateway
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.0.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "ServerlessSubnetA"
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.1.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "ServerlessSubnetB"
    ServerlessSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB
        Tags: 
          - 
            Key: "Name"
            Value: "ServerlessSubnetGroup"    
    RoutePublic:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: ServerlessInternetGateway
        RouteTableId:
          Ref: RouteTablePublic
    ServerlessInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags: 
          - 
            Key: "Name"
            Value: "ServerlessInternetGateway"
    
    RouteTableAssociationSubnetA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: ServerlessSubnetA

    RouteTableAssociationSubnetB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: ServerlessSubnetB


    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: "0.0.0.0/0"
        Tags: 
          - 
            Key: "Name"
            Value: "ServerlessSecurityGroup"

    RouteTablePublic:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
        Tags:
          - Key: Name
            Value: public-route
    


    
#functions:
#  graphql:
#    handler: handler.server
#    events:
#      - http:
#          path: /
#          method: post
#          cors: true
    
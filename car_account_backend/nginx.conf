user  nginx;
worker_processes  1;

#크리티컬한 로그만 저장, CPU I/O 향상
error_log  /var/log/nginx/error.log crit;
pid        /var/run/nginx.pid;

events {
    worker_connections  4000;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    # I/O 부스팅을 위해 엑세스 로그를 끔.
    access_log off;
    sendfile on;

    #tcp header를 배치처리
    tcp_nopush on;
    tcp_nodelay on;

    #timed out connection 리셋 on
    reset_timedout_connection on;
    keepalive_timeout 30;

    upstream docker-express { # 1
        least_conn;
        server express1:4000 weight=10;
        server express2:4000 weight=10;
    }

    server {
        listen 80;
        server_name 3.34.87.77; #향후 api.도메인명.com 으로 api 서버 운영 예정

        location / {
		proxy_http_version 1.1;
            	proxy_pass         http://docker-express; # 2
        }

    }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    include /etc/nginx/conf.d/*.conf;
}
